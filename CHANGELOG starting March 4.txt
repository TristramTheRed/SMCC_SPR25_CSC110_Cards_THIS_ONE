CHANGELOG starting 5/4

5/4

BlackjackGame.java 
ADDED:
import java.util.ArrayList;
import java.util.List;
public class BlackjackGame {
    // Game Components
    private Deck deck;
    private Hand playerHand;
    private Hand dealerHand;
    // Game State
    private boolean gameInProgess = false;
    private boolean playerTurn = false;
    private boolean dealerTurn = false;
    private boolean gameOver = false;
    public BlackjackGame() {deck = new Deck(52);playerHand = new Hand(21);dealerHand = new Hand(21);}
    public void startNewGame() {playerHand = new Hand(21);dealerHand = new 	Hand(21);deck.buildDeck();deck.shuffle();playerHand.addCard(deck.dealCard());dealerHand.addCard(deck.dealCard());playerHand.addCard(deck.dealCard());dealerHand.addCard(deck.dealCard());gameInProgess = true;playerTurn = 	true;dealerTurn = false;gameOver = false;}
    public void playerHit() {if (gameInProgess && playerTurn) {playerHand.addCard(deck.dealCard()); if (calculateHandValue(playerHand) > 21) {playerTurn = false;dealerTurn = false;gameInProgess = false;gameOver = true;}
    public void playerStay() {if (gameInProgess && playerTurn) {playerTurn = false;dealerTurn = true;dealerPlay();}}
    private void dealerPlay() {while (dealerTurn) {int dealerValue = calculateHandValue(dealerHand);if (dealerValue < 17) {dealerHand.addCard(deck.dealCard());if (calculateHandValue(dealerHand) > 21) {dealerTurn = false;gameInProgess = false;gameOver = true;}} else {dealerTurn = false;gameOver = true;determineWinner();}}}

    private void determineWinner() {int playerValue = calculateHandValue(playerHand);int dealerValue = calculateHandValue(dealerHand);if (playerValue > dealerValue) {[Player Win]} else if (dealerValue > playerValue) {Dealer Win} else {Push}gameInProgess = false;}
    
public int calculateHandValue(Hand hand) {int value = 0; int aceCount = 0; for (int i = 0; i < hand.last; i++) {Card card = hand.getCard(i);value += card.getRank();if (card.isAce()) {aceCount++;}}
    
// Adjust for aces(treat them as 1 instead of 11 if needed)
while (value > 21 && aceCount > 0) {value -= 10; aceCount--;} return value;}

public Hand getPlayerHand(){return playerHand;}

public Hand getDealerHand() {return dealerHand;}

public boolean isGameInProgress() {return gameInProgess;}

public boolean isPlayerTurn() {return playerTurn;}

public boolean isDealerTurn() {return dealerTurn;}

public boolean isGameOver() {return gameOver;}}   



SortCards.java

ADDED

private Font BlackAdder;
BlackjackGame game; 
JButton HitButton; 
JButton StayButton; 
JButton NewGameButton; 

try {
	// Load custom font
	File fontFile = new File("fonts\\ITCBLKAD.TTF");
	BlackAdder = Font.createFont(Font.TRUETYPE_FONT, fontFile);
	// Register with Graphics env
	GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
	ge.registerFont(BlackAdder);
        } catch (IOException | FontFormatException e) {
	e.printStackTrace();
        //Fallback on error
        BlackAdder = new Font("Arial", Font.BOLD, 24);}

game = new BlackjackGame(); 
// Draw background
g.setColor(new Color(53, 101, 77)); 
g.fillRect(0, 0, getWidth(), getHeight()); 
// Draw player's hand label 
g.setColor(Color.WHITE);
g.setFont(BlackAdder.deriveFont(Font.PLAIN, 28f)); 
g.drawString("Player's Hand", 20, 100);
// Draw dealer's hand label 
g.setColor(Color.WHITE);
g.drawString("Dealer's Hand", 20, 350);
// Draw dealer's hand 
Hand dealerHand = game.getDealerHand();
for (int i = 0; i < dealerHand.last; i++) {
Card card = dealerHand.getCard(i);
// if it's the first cand and it's the dealer's turn, show back of card
if (i == 0 && game.isPlayerTurn()) {
	Image cardImg = new ImageIcon("cards/card-back.png").getImage();
	g.drawImage(cardImg, 20, 370, cardWidth, cardHeight, null);
        } else {
        Image cardImg = new ImageIcon(card.getImagePath()).getImage();
        g.drawImage(cardImg, 20 + (cardWidth + 5) * i, 370, cardWidth, cardHeight, null);}}

// Draw game status - Added 85 though 108
g.setFont(BlackAdder.deriveFont(Font.PLAIN, 28f)); 
if (!game.isGameInProgress()) {
	if(game.isGameOver()){
        // Show both hand values and label winner
        int playerValue = game.calculateHandValue(playerHand);
        int dealerValue = game.calculateHandValue(dealerHand);
        g.setColor(Color.WHITE);
        g.drawString("Value: " + playerValue, 300, 100); 
        g.drawString("Value: " + dealerValue, 300, 350);
        // Show winner message
        g.setFont(BlackAdder.deriveFont(Font.PLAIN, 36f)); 
        String resultMessage;
        if (playerValue > 21) {
        resultMessage = "Player Busts! Dealer Wins!";
        g.setColor(Color.RED);
        } else if (dealerValue > 21) {
        resultMessage = "Dealer Busts! Player Wins!";
        g.setColor(Color.GREEN);
        } else if (playerValue > dealerValue) {
        resultMessage = "Player Wins!";
        g.setColor(Color.GREEN);
        } else if (dealerValue > playerValue) {
        resultMessage = "Dealer Wins!";
        g.setColor(Color.RED);
        } else {
        resultMessage = "Push! It's a Tie!";
        g.setColor(Color.YELLOW);}
	g.drawString(resultMessage, boardWidth/2 - 200, boardHeight/2);
        } else {
        g.setColor(Color.WHITE);
        g.drawString("Press 'New Game' to Start", 600, 75); // Changed y:250 -> 75}  
	}else {
        // Show hand values
        int playerValue = game.calculateHandValue(playerHand);
        g.setColor(Color.WHITE);
        g.drawString("Value: " + playerValue, 300, 100);
 	if (!game.isPlayerTurn()) {
        int dealerValue = game.calculateHandValue(dealerHand);
        g.drawString("Value: " + dealerValue, 300, 350);}} 
	} catch (Exception e) {
        e.printStackTrace();}}};

HitButton = new JButton("Hit"); 
StayButton = new JButton("Stay"); 
NewGameButton = new JButton("New Game"); 
HitButton.setFocusable(false); 
ButtonPanel.add(HitButton); 
StayButton.setFocusable(false); 
ButtonPanel.add(StayButton); 
NewGameButton.setFocusable(false); 
ButtonPanel.add(NewGameButton); 
// Disable the game buttons until the game starts 
HitButton.setEnabled(false);
StayButton.setEnabled(false);
//Add action listeners to buttons 
HitButton.addActionListener((ActionEvent e) -> {
	game.playerHit();
        updateButtonStates();
        GamePanel.repaint();});

StayButton.addActionListener((ActionEvent e) -> {
	game.playerStay();
        updateButtonStates();
        GamePanel.repaint();});

NewGameButton.addActionListener((ActionEvent e) -> {
	game.startNewGame();
        updateButtonStates();
        GamePanel.repaint();});

private void updateButtonStates() {
	HitButton.setEnabled(game.isPlayerTurn());
        StayButton.setEnabled(game.isPlayerTurn());
        NewGameButton.setEnabled(!game.isGameInProgress() || !game.isPlayerTurn());}
GamePanel.repaint();

REMOVED
Deck Deck;
Hand Hand;
JButton SortButton; 
JButton ShuffleHandButton;
JButton ShuffleDeckButton;
Deck = new Deck(52);
Hand = new Hand(13);
JPanel
JButton SortButton = new JButton("Deal");
JButton ShuffleHandButton = new JButton("Shuffle Hand");
JButton ShuffleDeckButton = new JButton("Shuffle Deck");
GamePanel.setBackground(new Color(53, 101, 77));
SortButton.setFocusable(false);
ButtonPanel.add(SortButton);
ButtonPanel.add(SortButton);
ButtonPanel.add(ShuffleHandButton);
ButtonPanel.add(ShuffleHandButton);
ButtonPanel.add(ShuffleDeckButton);
SortButton.addActionListener((ActionEvent e) -> {
System.out.println("sortButton.() needs to be edited");
dealHand();
GamePanel.repaint();
ShuffleHandButton.addActionListener(e -> {shuffle(Hand);});
Deck.buildDeck();
shuffle(Deck); // used for debugging
dealHand();
shuffle(Hand); // used for debugging
System.out.println("PLAYER: ");
System.out.println(Hand);
public void dealHand() {for (int i = 0; i < 13; i++) {Card card = Deck.dealCard();Hand.addCard(card);GamePanel.repaint();}
public void shuffle(Deck d) {d.shuffle();GamePanel.repaint();}
ShuffleDeckButton.addActionListener(e -> {Hand = null; Hand = new Hand(13); shuffle(Deck);dealHand();});


CHANGED
int boardHeight = 700; // Changed 600 -> 700
int cardHeight = 200; // Changed 220 -> 200
// Changed new Font("Arial", Font.BOLD, 20 -> BlackAdder.deriveFont(Font.PLAIN, 28f
for (int i = 0; i < playerHand.last; i++) // Changed for (int i = 0; i < Hand.last; i++)
Card card = playerHand.getCard(i); // Changed Card card = Hand.getCard(i);
g.setFont(BlackAdder.deriveFont(Font.PLAIN, 28f)); //Changed new Font("Arial", Font.BOLD, 24 -> BlackAdder.deriveFont(Font.PLAIN, 28f
g.drawString("Press 'New Game' to Start", 600, 75); // Changed y:250 -> 75
g.setFont(BlackAdder.deriveFont(Font.PLAIN, 28f)); //Changed new Font("Arial", Font.BOLD, 24 -> BlackAdder.deriveFont(Font.PLAIN, 28f
g.drawString("Press 'New Game' to Start", 600, 75); // Changed y:250 -> 75
